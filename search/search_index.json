{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Pilot is a library that allows you to share viewmodels, navigation and components on android and iOS</p>"},{"location":"#pilot","title":"Pilot","text":""},{"location":"#kotlin-versions","title":"Kotlin versions","text":"<p>Each release outlines what version of the Kotlin compiler is used.</p>"},{"location":"#libraries","title":"Libraries","text":""},{"location":"#viewmodel","title":"Viewmodel","text":"<p>A tiny library that allows you to share view models between android and iOS.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>A library for Compose and SwiftUI that allows you to share navigation between android and iOS.</p>"},{"location":"#components","title":"Components","text":"<p>A library that contains re-usable components that can be used in your view models.</p>"},{"location":"#pre-requisites","title":"Pre-requisites","text":"<p>All libraries require:</p> <ul> <li>SKIE to be configured on your main project.</li> <li>Your kotlin multiplatform iOS Framework to be called <code>Shared</code>.</li> </ul>"},{"location":"#license","title":"License","text":"<p>Pilot is \u00a9 2024 Mirego and may be freely distributed under the New BSD license. See the <code>license</code> file.</p>"},{"location":"#about-mirego","title":"About Mirego","text":"<p>Mirego is a team of passionate people who believe that work is a place where you can innovate and have fun. We\u2019re a team of talented people who imagine and build beautiful Web and mobile applications. We come together to share ideas and change the world.</p> <p>We also love open-source software and we try to give back to the community as much as we can.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to the library will be documented in this file.</p> <p>The format is based on Keep a Changelog.</p>"},{"location":"changelog/#upcoming","title":"Upcoming","text":""},{"location":"changelog/#updates","title":"Updates","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":""},{"location":"changelog/#040","title":"0.4.0","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Coil3 module</li> </ul>"},{"location":"changelog/#updates_1","title":"Updates","text":"<ul> <li>Kotlin to 2.2.0</li> <li>AGP to 8.11.1</li> <li>Gradle to 8.14.3</li> <li>Several other dependencies</li> </ul>"},{"location":"changelog/#036","title":"0.3.6","text":""},{"location":"changelog/#updates_2","title":"Updates","text":"<ul> <li>Update compose Picker to expose offset and properties of inner drop down menu</li> </ul>"},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>Renamed compose Picker <code>itemColors</code> field to <code>labelView</code>.</li> </ul>"},{"location":"code-of-conduct/","title":"Code of Conduct","text":"<p>Contact: info@mirego.com</p>"},{"location":"code-of-conduct/#why-have-a-code-of-conduct","title":"Why have a Code of Conduct?","text":"<p>As contributors and maintainers of this project, we are committed to providing a friendly, safe and welcoming environment for all, regardless of age, disability, gender, nationality, race, religion, sexuality, or similar personal characteristic.</p> <p>The goal of the Code of Conduct is to specify a baseline standard of behavior so that people with different social values and communication styles can talk about the project effectively, productively, and respectfully, even in face of disagreements. The Code of Conduct also provides a mechanism for resolving conflicts in the community when they arise.</p>"},{"location":"code-of-conduct/#our-values","title":"Our Values","text":"<p>These are the values Trikot developers should aspire to:</p> <ul> <li>Be friendly and welcoming</li> <li>Be patient<ul> <li>Remember that people have varying communication styles and that not everyone is using their native language. (Meaning and tone can be lost in translation.)</li> </ul> </li> <li>Be thoughtful<ul> <li>Productive communication requires effort. Think about how your words will be interpreted.</li> <li>Remember that sometimes it is best to refrain entirely from commenting.</li> </ul> </li> <li>Be respectful<ul> <li>In particular, respect differences of opinion. It is important that we resolve disagreements and differing views constructively.</li> </ul> </li> <li>Avoid destructive behavior<ul> <li>Derailing: stay on topic; if you want to talk about something else, start a new conversation.</li> <li>Unconstructive criticism: don't merely decry the current state of affairs; offer (or at least solicit) suggestions as to how things may be improved.</li> <li>Snarking (pithy, unproductive, sniping comments).</li> </ul> </li> </ul> <p>The following actions are explicitly forbidden:</p> <ul> <li>Insulting, demeaning, hateful, or threatening remarks.</li> <li>Discrimination based on age, disability, gender, nationality, race, religion, sexuality, or similar personal characteristic.</li> <li>Bullying or systematic harassment.</li> <li>Unwelcome sexual advances.</li> <li>Incitement to any of these.</li> </ul>"},{"location":"code-of-conduct/#acknowledgements","title":"Acknowledgements","text":"<p>This document was based on the Code of Conduct from the Elixir project.</p>"},{"location":"components/","title":"Components","text":"<p>This library provides a set of re-usable components that can be used in your application. We provide integration with material3 and coil for android and kingfisher for iOS.</p>"},{"location":"components/#usage","title":"Usage","text":"<p>There are several components available in this library. Refer to the API docs for more extensive information.</p>"},{"location":"components/#images-and-style-resources","title":"Images and style resources","text":"<p>Image and style resources (for rich text) is something you need to setup in your application theme.</p>"},{"location":"components/#android","title":"Android","text":"<p>Start by creating a <code>PilotTextStyleResourceProvider</code>. <pre><code>class YourTextStyleResourceProvider : PilotTextStyleResourceProvider {\n    @Composable\n    override fun textStyleForResource(resource: PilotTextStyleResource) =\n        when (resource) {\n            is YourTextStyleResource -&gt; mapYourStyleResource(resource)\n            else -&gt; null\n        }\n\n    @Composable\n    private fun mapYourStyleResource(resource: YourTextStyleResource): TextStyle =\n        when (resource) {\n            YourTextStyleResource.YOUR_TITLE_STYLE -&gt; TextStyle(fontWeight = FontWeight.Bold)\n        }\n}\n</code></pre></p> <p>And then create a <code>PilotImageResourceProvider</code>. <pre><code>private val resourceMap = enumMapBuilder&lt;YourImageResource, @Composable () -&gt; Painter&gt; {\n    when (this) {\n        YourImageResource.CLOSE_ICON -&gt; imageVector(Icons.Filled.Close)\n        YourImageResource.BRAND_TOPBAR_LOGO -&gt; resource(R.drawable.ic_brand_logo)\n    }\n}\n\nprivate fun resource(@DrawableRes id: Int): @Composable () -&gt; Painter =\n    {\n        painterResource(id)\n    }\n\nprivate fun imageVector(image: ImageVector): @Composable () -&gt; Painter =\n    {\n        rememberVectorPainter(image)\n    }\n\nclass YourImageResourceProvider : PilotImageResourceProvider {\n    @Composable\n    override fun painterForResource(resource: PilotImageResource): Painter? =\n        when (resource) {\n            is YourImageResource -&gt; resourceMap.getValue(resource).invoke()\n            else -&gt; throw IllegalArgumentException(\"Unsupported image resource: $resource\")\n        }\n}\n</code></pre> And pass it to the <code>PilotResources</code> @Composable function. <pre><code>PilotResources(\n    textStyleResourceProvider = YourTextStyleResourceProvider(),\n    imageResourceProvider = YourImageResourceProvider(),\n)\n</code></pre></p> <p>Underneath, the <code>PilotResources</code> composable will provide the resources to the <code>PilotRichText</code> and <code>PilotRemoteImage</code> components. It is done via a composition local. It is also possible to nest multiple <code>PilotResources</code> composable to provide different resources to different parts of your application.</p>"},{"location":"components/#ios","title":"iOS","text":"<p>First create a <code>PilotTextStyleProvider</code>. <pre><code>final class YourTextStyleProvider: PilotTextStyleProvider {\n    func spanStyle(from resource: PilotTextStyleResource) -&gt; PilotSpanStyle {\n        guard let resource = resource as? YourTextStyleResource else { fatalError(\"Invalid PilotTextStyleResource type\") }\n        return resource.spanStyle(fontsProvider: fontsProvider, colorsProvider: colorsProvider)\n    }\n}\n\nextension YourTextStyleResource {\n    func spanStyle() -&gt; PilotSpanStyle {\n        switch self {\n        case .yourTitleStyle:\n            [.font: UIFont(name: \"FontAwesome\", size: 30)]\n        }\n    }\n}\n</code></pre></p> <p>And then create a <code>PilotImageProvider</code>. <pre><code>final class YourImageProvider: PilotImageProvider {\n    func image(from resource: PilotImageResource) -&gt; Image {\n        resource.image\n    }\n}\n\nextension PilotImageResource {\n    var image: Image {\n        guard let self = self as? YourImageResource else { fatalError(\"Unsupported image type\")}\n        return self.image\n    }\n}\n\nextension YourImageResource {\n    var image: Image {\n        switch self {\n        case .yourImageResource:\n            Image(.imageResource)\n        }\n    }\n}\n</code></pre></p> <p>You can create a custom View Modifier to provide the resources to the components.  <pre><code>private struct YourStyleModifier: ViewModifier {\n    func body(content: Content) -&gt; some View {\n        content\n            .environment(\\.pilotImageProvider, YourImageProvider())\n            .environment(\\.pilotTextStyleProvider, YourTextStyleProvider())\n    }\n}\n\nextension View {\n    func yourStyle() -&gt; some View {\n        modifier(YourStyleModifier())\n    }\n}\n</code></pre> Underneath, the <code>PilotResources</code> view modifier will provide the resources to the <code>PilotRichTextView</code> and <code>PilotRemoteImageView</code> components. It is done via an environment variable.</p>"},{"location":"components/#view-lifecycle-events","title":"View lifecycle events","text":"<p><code>PilotAppearanceLifecycle</code> allows you to listen to the lifecycle events of your views. This can be used by inheriting from <code>PilotAppearanceLifecycleViewModel</code> or delegating your component class to <code>PilotAppearanceLifecycleImpl</code> such as:</p> <pre><code>class YourComponent: PilotAppearanceLifecycle by PilotAppearanceLifecycleImpl()\n</code></pre> <p>And then on Android using the <code>@Composable</code>: <pre><code>PilotLifecycleView(yourComponent) {\n    // Your view here\n}\n</code></pre></p> <p>And on iOS using the view modifier: <pre><code>YourView {\n    // Your view here\n}\n.pilotAppearanceLifecycle(yourComponent)\n</code></pre></p>"},{"location":"components/#components_1","title":"Components","text":"Common Android iOS <code>PilotButton</code> <code>PilotButton</code> <code>PilotButtonView</code> <code>PilotRichText</code> <code>PilotRichText</code> <code>PilotRichTextView</code> <code>PilotSwitch</code> <code>PilotSwitch</code> <code>PilotSwitchView</code> <code>PilotTextField</code> <code>PilotTextField</code> <code>PilotTextFieldView</code> <code>PilotRemoteImage</code> <code>PilotRemoteImage</code> <code>PilotRemoteImageView</code> <code>PilotRemoteImage</code> <code>PilotRemoteImage</code> <code>PilotRemoteImageView</code> <code>PilotResizableRemoteImage</code> <code>PilotResizableRemoteImage</code> <code>PilotResizableRemoteImageView</code> <code>PilotPicker</code> <code>PilotPicker</code> <code>PilotPickerView</code>"},{"location":"components/#installation","title":"Installation","text":""},{"location":"components/#common","title":"Common","text":"<p><code>build.gradle.kts</code> <pre><code>repositories {\n    maven(url = \"https://s3.amazonaws.com/mirego-maven/public\")\n}\n\ndependencies {\n    implementation(\"com.mirego.pilot:components:&lt;version&gt;\")\n}\n</code></pre></p>"},{"location":"components/#android_1","title":"Android","text":"<p><code>build.gradle.kts</code> <pre><code>repositories {\n    maven(url = \"https://s3.amazonaws.com/mirego-maven/public\")\n}\n\ndependencies {\n    implementation(\"com.mirego.pilot:components:&lt;version&gt;\")\n    implementation(\"com.mirego.pilot:components-material3:&lt;version&gt;\")\n    implementation(\"com.mirego.pilot:components-coil:&lt;version&gt;\")\n}\n</code></pre></p>"},{"location":"components/#ios_1","title":"iOS","text":"<p><code>Podfile</code> <pre><code>pod 'Pilot/Components', :git =&gt; 'git@github.com:mirego/viewmodel-pilot.git', :tag =&gt; '&lt;version&gt;', :inhibit_warnings =&gt; true\npod 'Pilot/Components.Kingfisher', :git =&gt; 'git@github.com:mirego/viewmodel-pilot.git', :tag =&gt; '&lt;version&gt;', :inhibit_warnings =&gt; true\n</code></pre></p>"},{"location":"license/","title":"License","text":"<p>Copyright (c) 2018-2024, Mirego All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li>Redistributions of source code must retain the above copyright notice,   this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution.</li> <li>Neither the name of the Mirego nor the names of its contributors may   be used to endorse or promote products derived from this software without   specific prior written permission.</li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"navigation/","title":"Navigation","text":""},{"location":"navigation/#usage","title":"Usage","text":""},{"location":"navigation/#common","title":"Common","text":"<p>First you must create a <code>NavigationRoute</code> sealed class that will represent all the possible routes of your application.</p> <pre><code>enum class YourNavigationRouteName {\n    ROUTE1,\n    ROUTE2\n}\n\nsealed class YourNavigationRoute(routeName: YourNavigationRouteName) :\n    EnumPilotNavigationRoute(routeName) {\n    data object Route1 : YourNavigationRoute(ROUTE1)\n    data class Route2(val someNavigationData: SomeNavigationData) : YourNavigationRoute(ROUTE2)\n}\n</code></pre> <p>You must also create a <code>NavigationAction</code> sealed class that will represent all the possible actions of your application.</p> <pre><code>sealed interface YourNavigationAction {\n    data object Action1 : YourNavigationAction\n    data class Action2(val someActionArgument: SomeActionArgument) : YourNavigationAction\n}\n</code></pre> <p>Then you must create a <code>NavigationManager</code> class which will allow you to navigate between routes. Navigation managers support a parent navigation manager which allows you to create a hierarchy of navigation managers.</p> <pre><code>class YourNavigationManager(\n    coroutineScope: CoroutineScope,\n    parentNavigationManager: YourNavigationManager? = null,\n) : DefaultPilotNavigationManager&lt;YourNavigationRoute, YourNavigationAction&gt;(\n    coroutineScope,\n    parentNavigationManager,\n)\n</code></pre>"},{"location":"navigation/#android","title":"Android","text":"<p>You must create a <code>YourActionNavigationListener</code> which will implement your external navigation actions.</p> <pre><code>class YourActionNavigationListener : PilotActionNavigationListener&lt;YourNavigationAction&gt; {\n    override fun handleAction(action: NewsNavigationAction) {\n        when (action) {\n            YourNavigationAction.Action1 -&gt; {\n                // Your code here\n            }\n            is YourNavigationAction.Action2 -&gt; {\n                // Your code here\n            }\n        }\n    }\n}\n</code></pre> <p>You must create a <code>NavigationHost</code> composable that will be the entry point of your application.</p> <pre><code>@Composable\nfun YourNavigationHost(\n    navigationManager: YourNavigationManager,\n    modifier: Modifier = Modifier,\n    rootContent: @Composable () -&gt; Unit,\n) {\n    val navController = rememberNavController()\n\n    LaunchedEffect(navigationManager, navController) {\n        navigationManager.listener = PilotNavControllerNavigationListener(navController)\n        navigationManager.actionListener = YourActionNavigationListener()\n    }\n\n    NavHost(\n        navController = navController,\n        startDestination = ROOT_ROUTE,\n    ) {\n        composable(ROOT_ROUTE) {\n            rootContent()\n        }\n        composable(YourNavigationRoute.ROUTE1.name) {\n            YourRoute1Screen(navigationManager)\n        }\n        composable(YourNavigationRoute.ROUTE2.name) {\n            YourRoute2Screen(navigationManager)\n        }\n    }\n\n    PilotBackHandler(\n        navController = navController,\n        navigationManager = navigationManager,\n        rootName = ROOT_ROUTE,\n    )\n}\n</code></pre>"},{"location":"navigation/#ios","title":"iOS","text":"<p>SwiftUI navigation works through the help of a View Modifier.</p> <pre><code>extension View {\n    func yourNavigation(navigationManager: YourNavigationManager) -&gt; some View {\n        modifier(YourNavigationModifier(navigationManager: navigationManager))\n    }\n}\n\nprivate struct YourNavigationModifier: ViewModifier {\n    let navigationManager: YourNavigationManager\n\n    func body(content: Content) -&gt; some View {\n        content\n            .pilotNavigation(\n                navigationManager: navigationManager,\n                buildView: buildView,\n                buildNavigation: buildNavigation,\n                handleAction: handleAction\n            )\n    }\n\n    @ViewBuilder\n    private func buildView(viewModelHolder: ViewModelHolder) -&gt; some View {\n        switch viewModelHolder {\n        case .route1(let viewModel):\n            Route1View(viewModel: viewModel)\n        case .route2(let viewModel):\n            Route2View(viewModel: viewModel)\n    }\n\n    private func buildNavigation(routes: [YourNavigationRoute], route: YourNavigationRoute) -&gt; PilotNavigationType&lt;ViewModelHolder, EmptyViewModifier&gt;? {\n        let onDismissClosure: () -&gt; Void = {\n            navigationManager.poppedFrom(route: route)\n        }\n\n        return switch onEnum(of: route) {\n        case .route1(let route):\n                .sheet(\n                    screen: ViewModelHolder.route1(\n                        // Create your view model here with the route\n                    ),\n                    data: NavigationTypeData(embedInNavigationView: false, onDismiss: onDismissClosure)\n                )\n        case .route2(let route):\n                .fullScreenCover(\n                    screen: ViewModelHolder.route2(\n                        // Create your view model here with the route\n                    ),\n                    data: NavigationTypeData(embedInNavigationView: false, onDismiss: onDismissClosure)\n                )\n    }\n\n    private func handleAction(action: YourNavigationAction) {\n        switch onEnum(of: action) {\n        case .action1:\n            // Your code here\n        case .action2(let action):\n            // Your code here\n    }\n}\n\nenum ViewModelHolder {\n    case route1(Route1ViewModel)\n    case route2(Route2ViewModel)\n}\n</code></pre>"},{"location":"navigation/#installation","title":"Installation","text":""},{"location":"navigation/#common-android","title":"Common / Android","text":"<p><code>build.gradle.kts</code></p> <pre><code>repositories {\n    maven(url = \"https://s3.amazonaws.com/mirego-maven/public\")\n}\n\ndependencies {\n    implementation(\"com.mirego.pilot:navigation:&lt;version&gt;\")\n}\n</code></pre>"},{"location":"navigation/#limitations","title":"Limitations","text":"<p>Warning</p> <p>This library does not support restoring the state of the navigation stack when the application is killed and restarted on android.  This is a known limitation and is not planned to be implemented in the future.</p> <p><code>Podfile</code></p> <pre><code>pod 'Pilot/Navigation', :git =&gt; 'git@github.com:mirego/viewmodel-pilot.git', :tag =&gt; '&lt;version&gt;', :inhibit_warnings =&gt; true\n</code></pre>"},{"location":"viewmodel/","title":"ViewModel","text":""},{"location":"viewmodel/#usage","title":"Usage","text":""},{"location":"viewmodel/#common","title":"Common","text":"<pre><code>class YourViewModel : PilotViewModel() {\n    val someData: StateFlow&lt;String&gt; = MutableStateFlow(\"\")\n    val someNullableData: StateFlow&lt;String?&gt; = MutableStateFlow(null)\n\n    fun yourFunction() {\n        viewModelScope.launch {\n            // Your code here\n        }\n    }\n}\n</code></pre>"},{"location":"viewmodel/#android","title":"Android","text":"<p>Use the view model as you would use a regular android view model. <pre><code>@Composable\nfun YourView(viewModel: YourViewModel) {\n    val someData by viewModel.someData.collectAsState()\n    val someNullableData by viewModel.someNullableData.collectAsState()\n}\n</code></pre></p>"},{"location":"viewmodel/#ios","title":"iOS","text":"<pre><code>struct YourView: View {\n    @StateObject private var viewModelLifecycle: ViewModelLifecycleHandler&lt;YourViewModel&gt;\n    @ObservedObject private var someData: StateObservable&lt;String&gt;\n    @ObservedObject private var someNullableData: NullableStateObservable&lt;String&gt;\n\n    private var viewModel: YourViewModel {\n        viewModelLifecycle.viewModel\n    }\n\n    init(viewModel: YourViewModel) {\n        _viewModelLifecycle = StateObject(wrappedValue: ViewModelLifecycleHandler(viewModel: viewModel))\n        _someData = ObservedObject(wrappedValue: StateObservable(viewModel.someData))\n        _someNullableData = ObservedObject(wrappedValue: NullableStateObservable(viewModel.someNullableData))\n   }\n\n    var body: some View {\n        // Your code here where you can use viewModel, someData.value and someNullableData.value\n    }\n}\n</code></pre>"},{"location":"viewmodel/#installation","title":"Installation","text":""},{"location":"viewmodel/#common-android","title":"Common / Android","text":"<p><code>build.gradle.kts</code> <pre><code>repositories {\n    maven(url = \"https://s3.amazonaws.com/mirego-maven/public\")\n}\n\ndependencies {\n    implementation(\"com.mirego.pilot:viewmodel:&lt;version&gt;\")\n}\n</code></pre></p>"},{"location":"viewmodel/#ios_1","title":"iOS","text":"<p><code>Podfile</code> <pre><code>pod 'Pilot/ViewModel', :git =&gt; 'git@github.com:mirego/viewmodel-pilot.git', :tag =&gt; '&lt;version&gt;', :inhibit_warnings =&gt; true\n</code></pre></p>"}]}